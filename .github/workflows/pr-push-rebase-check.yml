name: CI

on:
  pull_request:
    # This job in fact only requires `synchronize` trigger to execute when a pull request's head branch is updated.
    # However, if set as Required Status Check, it will block any newly opened PRs if using only `synchronize`.
    types: [synchronize, opened, reopened]

jobs:
  pull-request:
    name: Check if recent push is only a rebase on the base branch
    runs-on: ubuntu-latest

    steps:
      - name: Check patch files
        id: check-if-pure-rebase
        # Execute this step only on push/synchronize (event_name is always 'pull_request')
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const compare_url = context.payload.pull_request.base.repo.compare_url
                .replace(`${context.apiUrl}/repos`, context.serverUrl)
                .replace("{base}", context.payload.pull_request.base.ref);
            console.info("Use these URLs for manual investigation (append '.patch' to download raw patch files):" +
                "\n    Before: " + compare_url.replace("{head}", context.payload.before) +
                "\n    After:  " + compare_url.replace("{head}", context.payload.after));
        
            const commonOctokitParams = {owner: context.repo.owner, repo: context.repo.repo};
            const commonPullParams = {...commonOctokitParams, pull_number: context.payload.number};
        
            // https://octokit.github.io/rest.js/v19#pulls-list-reviews
            const review_ids = await github.rest.pulls.listReviews(commonPullParams).then(rsp => {
                return rsp.data;
            }).then(reviews => {
                // Dismissing already dismissed review will result in API error. Possible
                // states are APPROVED, CHANGES_REQUESTED, COMMENTED, DISMISSED, PENDING.
                return reviews.filter(r => r.state === "APPROVED").map(r => r.id);
            });
        
            async function dismissReviews(message) {
                console.log(`Dismissing reviews ${review_ids}`);
                await Promise.all(review_ids.map(async (review_id) => {
                    console.debug(`Dismissing review ${review_id}`);
                    await github.rest.pulls.dismissReview({...commonPullParams, review_id: review_id, message});
                }));
                // github.rest.pulls.requestReviewers could be used here to automatically
                // re-request the reviews, but this is out of scope of this script.
                return message;
            }
        
            // Get patch of the previous state (before push) and the current
            // state (after push) of the PR, compared to the base branch.
            // https://octokit.github.io/rest.js/v19#repos-compare-commits-with-basehead
            const commonCompareParams = {
                ...commonOctokitParams,
                mediaType: {
                    format: "application/vnd.github.patch"
                }
            };
            let api_error = "";
            let patches = await Promise.all([
                github.rest.repos.compareCommitsWithBasehead({
                    ...commonCompareParams,
                    basehead: `${context.payload.pull_request.base.ref}...${context.payload.before}`
                }),
                github.rest.repos.compareCommitsWithBasehead({
                    ...commonCompareParams,
                    basehead: `${context.payload.pull_request.base.ref}...${context.payload.after}`
                })
            ]).then(responses => {
                return responses.map(rsp => rsp.data);
            }).catch(err => {
                api_error = ` (_${err.message}_)`
                return null;
            });
        
            console.log(typeof patches);
            console.log(patches);
            try {
                console.log(typeof patches, typeof patches[0], typeof patches[1]);
            }
            catch (e) {
                console.log(e);
            }
        
            patches = [
                {},
                "some patch"
            ];
        
            console.log(typeof patches[0], typeof patches[1]);
        
            if (!patches) {
                // Always fallback to default always-dismiss behaviour on errors
                return await dismissReviews(
                    "Dismissed reviews because pull-request patch files could not be checked" + api_error
                );
            }
        
            console.log(`Patch length: before = ${patches[0].length}, after = ${patches[1].length}`);
        
            // Remove commit hashes from the patch files, which are the only thing changed if
            // this is really only a pure rebase and nothing included in this PR is changed
            patches = patches
                .map(p => p.replace(
                    // A brief metadata header that begins with "From <commit> Mon Sep 17 00:00:00 2001"
                    /^From [\da-f]{40} Mon Sep 17 00:00:00 2001$/gm, "### REMOVED COMMIT METADATA HEADER ###"
                ))
                .map(p => p.replace(
                    /^index [\da-f]{7}\.\.[\da-f]{7}(?: \d{6})?$/gm, "### REMOVED FILE INDEX HEADER ###"
                ))
                .map(p => p.replace(
                    // Ignore (only) range information from change hunk header "@@ -l,s +l,s @@ optional section heading"
                    /^@@ -\d+,\d+ \+\d+,\d+ @@/gm, "@@ REMOVED RANGE INFO @@"
                ));
        
            if (patches[0] === patches[1]) {
                return `Keeping the reviews because the latest push was only a rebase on ${context.payload.pull_request.base.ref}`
            }
        
            return await dismissReviews("Dismissed reviews because pull-request content was changed");


      - name: Add summary
        if: steps.check-if-pure-rebase.outcome == 'success'
        run: echo "${{steps.check-if-pure-rebase.outputs.result}}" >> $GITHUB_STEP_SUMMARY

      - name: Skip this check (not a push)
        # Execute this step only if check-if-pure-rebase was not executed (trigger was not a push)
        if: steps.check-if-pure-rebase.outcome == 'skipped'
        run: echo "This check was skipped ('${{ github.event_name }}' action was '${{ github.event.action }}')" >> $GITHUB_STEP_SUMMARY
